//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by T4EmbeddedResources.tt at 10/01/2018 11:55:37.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//		Note: 
//			If a resource is not being added, ensure the the build action has
//			been set to "Embedded Resource".
// </auto-generated>
//------------------------------------------------------------------------------
#if DEBUG
using System.Diagnostics;
#endif
using System.IO;

namespace T4EmbeddedResources.Sample.Resources
{
	/// <summary>
	/// Collection of resource providers to retrieve a embedded resources. Resources are retrieved from disk 
	/// in a DEBUG build by reconstructing the path to the resource by searching for the .sln file in the 
	/// parent tree structure.
	/// </summary>
	public static class TextResources
	{
		static TextResources() 
		{
#if DEBUG
			HelloWorld = new DebugResourceStreamProvider(@"T4EmbeddedResources.Sample\Resources\HelloWorld.txt", @"T4EmbeddedResources.Sample.Resources.HelloWorld.txt");
#else
			HelloWorld = new EmbeddedResourceStreamProvider(@"T4EmbeddedResources.Sample.Resources.HelloWorld.txt");
#endif
		}

        public static IResourceStreamProvider HelloWorld { get; }

#if DEBUG
	   /// <summary>
	   /// Resource provider to provide an unmanaged stream to an embedded resource from disk. 
	   /// This is for development use only with release builds using <see cref="EmbeddedResourceStreamProvider" />.
	   /// <summary>
	   public class DebugResourceStreamProvider : IResourceStreamProvider
	   {
			static string _slnPath;
			readonly string _path;

			bool _embeddedResourceFound;

			static DebugResourceStreamProvider()
			{
			    var assmeblyPath = Path.GetDirectoryName(typeof(DebugResourceStreamProvider).Assembly.Location);
				var root = new DirectoryInfo(assmeblyPath);
				while (root != null)
				{
					if (File.Exists(Path.Combine(root.FullName, @"T4EmbeddedResources.sln")))
					{
						_slnPath = root.FullName;
						return;
					}

					root = root.Parent;
				}

				Debug.Write($"{typeof(DebugResourceStreamProvider).FullName}: Unable to find .sln root (T4EmbeddedResources.sln).");
			}

			internal DebugResourceStreamProvider(string path, string resourceName)
			{
				_embeddedResourceFound = false;

				_path = Path.Combine(_slnPath, path);
				ResourceName = resourceName;
			}

			/// <summary>
			/// Gets an unmanaged stream for an embedded resource from disk.
			/// </summary>
			public Stream GetTemplateStream()
			{
                AssertEmbeddedResourceCanBeFound();
                Debug.Assert(File.Exists(_path), $"Unable to find file on disk [{_path}]");

				Trace.Write($"{typeof(DebugResourceStreamProvider).FullName}: Reading {ResourceName} from {_path}.");

				return File.OpenRead(_path);
			}

			/// <summary>
			/// Asserts that the resource exists as an embedded resource (safety check for a release build).
			/// </summary>
			private void AssertEmbeddedResourceCanBeFound()
			{
				if (_embeddedResourceFound)
				{
					return;
				}

				var assembly = typeof(EmbeddedResourceStreamProvider).Assembly;
				var resourceInfo = assembly.GetManifestResourceInfo(ResourceName);

                Debug.Assert(resourceInfo != null, $"Unable to find resource [{ResourceName}]");

				_embeddedResourceFound = true;
			}

			/// <summary>
			/// Associated embedded resource name.
			/// </summary>
			public string ResourceName { get; }
	   }
#endif

	   /// <summary>
	   /// Creates an unamanged stream for an embedded resource.
	   /// </summary>
	   public class EmbeddedResourceStreamProvider : IResourceStreamProvider
	   {
			internal EmbeddedResourceStreamProvider(string resourceName)
			{
				ResourceName = resourceName;
			}

			/// <summary>
			/// Resource name.
			/// </summary>
            public string ResourceName { get; }

			/// <summary>
			/// Gets an unmanaged stream for an embedded resource.
			/// </summary>
			public Stream GetTemplateStream()
			{
				var assembly = typeof(EmbeddedResourceStreamProvider).Assembly;
				return assembly.GetManifestResourceStream(ResourceName);
			}
	   }
	}

	/// <summary>
	/// Resource stream provider.
	/// </summary>
	public interface IResourceStreamProvider
	{
		/// <summary>
		/// Gets an unmanaged stream for a resource.
		/// </summary>
		Stream GetTemplateStream();
	}
}
